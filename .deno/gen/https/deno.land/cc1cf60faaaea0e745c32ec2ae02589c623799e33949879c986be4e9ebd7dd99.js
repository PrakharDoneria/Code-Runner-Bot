// deno-lint-ignore-file no-explicit-any
import { debug as d, defaultAdapter } from "../platform.deno.ts";
import { adapters as nativeAdapters } from "./frameworks.ts";
const debugErr = d("grammy:error");
const callbackAdapter = (update, callback, header, unauthorized = ()=>callback('"unauthorized"'))=>({
    update: Promise.resolve(update),
    respond: callback,
    header,
    unauthorized
  });
const adapters = {
  ...nativeAdapters,
  callback: callbackAdapter
};
export function webhookCallback(bot, adapter = defaultAdapter, onTimeout, timeoutMilliseconds, secretToken) {
  const { onTimeout: timeout = "throw", timeoutMilliseconds: ms = 10_000, secretToken: token } = typeof onTimeout === "object" ? onTimeout : {
    onTimeout,
    timeoutMilliseconds,
    secretToken
  };
  let initialized = false;
  const server = typeof adapter === "string" ? adapters[adapter] : adapter;
  return async (...args)=>{
    const { update, respond, unauthorized, end, handlerReturn, header } = server(...args);
    if (!initialized) {
      // Will dedupe concurrently incoming calls from several updates
      await bot.init();
      initialized = true;
    }
    if (header !== token) {
      await unauthorized();
      // TODO: investigate deno bug that happens when this console logging is removed
      console.log(handlerReturn);
      return handlerReturn;
    }
    let usedWebhookReply = false;
    const webhookReplyEnvelope = {
      async send (json) {
        usedWebhookReply = true;
        await respond(json);
      }
    };
    await timeoutIfNecessary(bot.handleUpdate(await update, webhookReplyEnvelope), typeof timeout === "function" ? ()=>timeout(...args) : timeout, ms);
    if (!usedWebhookReply) end?.();
    return handlerReturn;
  };
}
function timeoutIfNecessary(task, onTimeout, timeout) {
  if (timeout === Infinity) return task;
  return new Promise((resolve, reject)=>{
    const handle = setTimeout(()=>{
      debugErr(`Request timed out after ${timeout} ms`);
      if (onTimeout === "throw") {
        reject(new Error(`Request timed out after ${timeout} ms`));
      } else {
        if (typeof onTimeout === "function") onTimeout();
        resolve();
      }
      const now = Date.now();
      task.finally(()=>{
        const diff = Date.now() - now;
        debugErr(`Request completed ${diff} ms after timeout!`);
      });
    }, timeout);
    task.then(resolve).catch(reject).finally(()=>clearTimeout(handle));
  });
}
//# sourceMappingURL=data:application/json;base64,