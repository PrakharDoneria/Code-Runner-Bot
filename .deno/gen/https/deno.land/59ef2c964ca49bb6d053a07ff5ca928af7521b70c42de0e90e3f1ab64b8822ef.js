// === Needed imports
import { basename } from "https://deno.land/std@0.211.0/path/basename.ts";
import { debug as d, isDeno } from "./platform.deno.ts";
const debug = d("grammy:warn");
// === Export all API types
export * from "https://deno.land/x/grammy_types@v3.14.0/mod.ts";
// === InputFile handling and File augmenting
/**
 * An `InputFile` wraps a number of different sources for [sending
 * files](https://grammy.dev/guide/files#uploading-your-own-files).
 *
 * It corresponds to the `InputFile` type in the [Telegram Bot API
 * Reference](https://core.telegram.org/bots/api#inputfile).
 */ export class InputFile {
  consumed = false;
  fileData;
  /**
     * Optional name of the constructed `InputFile` instance.
     *
     * Check out the
     * [documentation](https://grammy.dev/guide/files#uploading-your-own-files)
     * on sending files with `InputFile`.
     */ filename;
  /**
     * Constructs an `InputFile` that can be used in the API to send files.
     *
     * @param file A path to a local file or a `Buffer` or a `ReadableStream` that specifies the file data
     * @param filename Optional name of the file
     */ constructor(file, filename){
    this.fileData = file;
    filename ??= this.guessFilename(file);
    this.filename = filename;
    if (typeof file === "string" && (file.startsWith("http:") || file.startsWith("https:"))) {
      debug(`InputFile received the local file path '${file}' that looks like a URL. Is this a mistake?`);
    }
  }
  guessFilename(file) {
    if (typeof file === "string") return basename(file);
    if ("url" in file) return basename(file.url);
    if (!(file instanceof URL)) return undefined;
    if (file.pathname !== "/") {
      const filename = basename(file.pathname);
      if (filename) return filename;
    }
    return basename(file.hostname);
  }
  /**
     * Internal method. Do not use.
     *
     * Converts this instance into a binary representation that can be sent to
     * the Bot API server in the request body.
     */ async toRaw() {
    if (this.consumed) {
      throw new Error("Cannot reuse InputFile data source!");
    }
    const data = this.fileData;
    // Handle local files
    if (typeof data === "string") {
      if (!isDeno) {
        throw new Error("Reading files by path requires a Deno environment");
      }
      const file = await Deno.open(data);
      return file.readable[Symbol.asyncIterator]();
    }
    if (data instanceof Blob) return data.stream();
    if (isDenoFile(data)) return data.readable[Symbol.asyncIterator]();
    // Handle Response objects
    if (data instanceof Response) {
      if (data.body === null) throw new Error(`No response body!`);
      return data.body;
    }
    // Handle URL and URLLike objects
    if (data instanceof URL) return await fetchFile(data);
    if ("url" in data) return await fetchFile(data.url);
    // Return buffers as-is
    if (data instanceof Uint8Array) return data;
    // Unwrap supplier functions
    if (typeof data === "function") {
      return new InputFile(await data()).toRaw();
    }
    // Mark streams and iterators as consumed and return them as-is
    this.consumed = true;
    return data;
  }
}
async function fetchFile(url) {
  const { body } = await fetch(url);
  if (body === null) {
    throw new Error(`Download failed, no response body from '${url}'`);
  }
  return body[Symbol.asyncIterator]();
}
function isDenoFile(data) {
  return isDeno && data instanceof Deno.FsFile;
}
//# sourceMappingURL=data:application/json;base64,