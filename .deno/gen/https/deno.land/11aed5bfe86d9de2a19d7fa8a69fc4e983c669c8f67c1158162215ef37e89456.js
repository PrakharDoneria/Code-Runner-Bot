import { debug as d } from "../platform.deno.ts";
const debug = d("grammy:warn");
/**
 * This class represents errors that are thrown by grammY because the Telegram
 * Bot API responded with an error.
 *
 * Instances of this class hold the information that the Telegram backend
 * returned.
 *
 * If this error is thrown, grammY could successfully communicate with the
 * Telegram Bot API servers, however, an error code was returned for the
 * respective method call.
 */ export class GrammyError extends Error {
  method;
  payload;
  /** Flag that this request was unsuccessful. Always `false`. */ ok;
  /** An integer holding Telegram's error code. Subject to change. */ error_code;
  /** A human-readable description of the error. */ description;
  /** Further parameters that may help to automatically handle the error. */ parameters;
  constructor(message, err, /** The called method name which caused this error to be thrown. */ method, /** The payload that was passed when calling the method. */ payload){
    super(`${message} (${err.error_code}: ${err.description})`);
    this.method = method;
    this.payload = payload;
    this.ok = false;
    this.name = "GrammyError";
    this.error_code = err.error_code;
    this.description = err.description;
    this.parameters = err.parameters ?? {};
  }
}
export function toGrammyError(err, method, payload) {
  switch(err.error_code){
    case 401:
      debug("Error 401 means that your bot token is wrong, talk to https://t.me/BotFather to check it.");
      break;
    case 409:
      debug("Error 409 means that you are running your bot several times on long polling. Consider revoking the bot token if you believe that no other instance is running.");
      break;
  }
  return new GrammyError(`Call to '${method}' failed!`, err, method, payload);
}
/**
 * This class represents errors that are thrown by grammY because an HTTP call
 * to the Telegram Bot API failed.
 *
 * Instances of this class hold the error object that was created because the
 * fetch call failed. It can be inspected to determine why exactly the network
 * request failed.
 *
 * If an [API transformer
 * function](https://grammy.dev/advanced/transformers) throws an error,
 * grammY will regard this as if the network request failed. The contained error
 * will then be the error that was thrown by the transformer function.
 */ export class HttpError extends Error {
  error;
  constructor(message, /** The thrown error object. */ error){
    super(message);
    this.error = error;
    this.name = "HttpError";
  }
}
function isTelegramError(err) {
  return typeof err === "object" && err !== null && "status" in err && "statusText" in err;
}
export function toHttpError(method, sensitiveLogs) {
  return (err)=>{
    let msg = `Network request for '${method}' failed!`;
    if (isTelegramError(err)) msg += ` (${err.status}: ${err.statusText})`;
    if (sensitiveLogs && err instanceof Error) msg += ` ${err.message}`;
    throw new HttpError(msg, err);
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZ3JhbW15QHYxLjMwLjAvY29yZS9lcnJvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIEFwaUVycm9yLCB0eXBlIFJlc3BvbnNlUGFyYW1ldGVycyB9IGZyb20gXCIuLi90eXBlcy50c1wiO1xuaW1wb3J0IHsgZGVidWcgYXMgZCB9IGZyb20gXCIuLi9wbGF0Zm9ybS5kZW5vLnRzXCI7XG5jb25zdCBkZWJ1ZyA9IGQoXCJncmFtbXk6d2FyblwiKTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgZXJyb3JzIHRoYXQgYXJlIHRocm93biBieSBncmFtbVkgYmVjYXVzZSB0aGUgVGVsZWdyYW1cbiAqIEJvdCBBUEkgcmVzcG9uZGVkIHdpdGggYW4gZXJyb3IuXG4gKlxuICogSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgaG9sZCB0aGUgaW5mb3JtYXRpb24gdGhhdCB0aGUgVGVsZWdyYW0gYmFja2VuZFxuICogcmV0dXJuZWQuXG4gKlxuICogSWYgdGhpcyBlcnJvciBpcyB0aHJvd24sIGdyYW1tWSBjb3VsZCBzdWNjZXNzZnVsbHkgY29tbXVuaWNhdGUgd2l0aCB0aGVcbiAqIFRlbGVncmFtIEJvdCBBUEkgc2VydmVycywgaG93ZXZlciwgYW4gZXJyb3IgY29kZSB3YXMgcmV0dXJuZWQgZm9yIHRoZVxuICogcmVzcGVjdGl2ZSBtZXRob2QgY2FsbC5cbiAqL1xuZXhwb3J0IGNsYXNzIEdyYW1teUVycm9yIGV4dGVuZHMgRXJyb3IgaW1wbGVtZW50cyBBcGlFcnJvciB7XG4gICAgLyoqIEZsYWcgdGhhdCB0aGlzIHJlcXVlc3Qgd2FzIHVuc3VjY2Vzc2Z1bC4gQWx3YXlzIGBmYWxzZWAuICovXG4gICAgcHVibGljIHJlYWRvbmx5IG9rOiBmYWxzZSA9IGZhbHNlO1xuICAgIC8qKiBBbiBpbnRlZ2VyIGhvbGRpbmcgVGVsZWdyYW0ncyBlcnJvciBjb2RlLiBTdWJqZWN0IHRvIGNoYW5nZS4gKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgZXJyb3JfY29kZTogbnVtYmVyO1xuICAgIC8qKiBBIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvci4gKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAvKiogRnVydGhlciBwYXJhbWV0ZXJzIHRoYXQgbWF5IGhlbHAgdG8gYXV0b21hdGljYWxseSBoYW5kbGUgdGhlIGVycm9yLiAqL1xuICAgIHB1YmxpYyByZWFkb25seSBwYXJhbWV0ZXJzOiBSZXNwb25zZVBhcmFtZXRlcnM7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICAgICAgZXJyOiBBcGlFcnJvcixcbiAgICAgICAgLyoqIFRoZSBjYWxsZWQgbWV0aG9kIG5hbWUgd2hpY2ggY2F1c2VkIHRoaXMgZXJyb3IgdG8gYmUgdGhyb3duLiAqL1xuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgbWV0aG9kOiBzdHJpbmcsXG4gICAgICAgIC8qKiBUaGUgcGF5bG9hZCB0aGF0IHdhcyBwYXNzZWQgd2hlbiBjYWxsaW5nIHRoZSBtZXRob2QuICovXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoYCR7bWVzc2FnZX0gKCR7ZXJyLmVycm9yX2NvZGV9OiAke2Vyci5kZXNjcmlwdGlvbn0pYCk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiR3JhbW15RXJyb3JcIjtcbiAgICAgICAgdGhpcy5lcnJvcl9jb2RlID0gZXJyLmVycm9yX2NvZGU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBlcnIuZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IGVyci5wYXJhbWV0ZXJzID8/IHt9O1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0dyYW1teUVycm9yKFxuICAgIGVycjogQXBpRXJyb3IsXG4gICAgbWV0aG9kOiBzdHJpbmcsXG4gICAgcGF5bG9hZDogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4pIHtcbiAgICBzd2l0Y2ggKGVyci5lcnJvcl9jb2RlKSB7XG4gICAgICAgIGNhc2UgNDAxOlxuICAgICAgICAgICAgZGVidWcoXG4gICAgICAgICAgICAgICAgXCJFcnJvciA0MDEgbWVhbnMgdGhhdCB5b3VyIGJvdCB0b2tlbiBpcyB3cm9uZywgdGFsayB0byBodHRwczovL3QubWUvQm90RmF0aGVyIHRvIGNoZWNrIGl0LlwiLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQwOTpcbiAgICAgICAgICAgIGRlYnVnKFxuICAgICAgICAgICAgICAgIFwiRXJyb3IgNDA5IG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIHlvdXIgYm90IHNldmVyYWwgdGltZXMgb24gbG9uZyBwb2xsaW5nLiBDb25zaWRlciByZXZva2luZyB0aGUgYm90IHRva2VuIGlmIHlvdSBiZWxpZXZlIHRoYXQgbm8gb3RoZXIgaW5zdGFuY2UgaXMgcnVubmluZy5cIixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBHcmFtbXlFcnJvcihcbiAgICAgICAgYENhbGwgdG8gJyR7bWV0aG9kfScgZmFpbGVkIWAsXG4gICAgICAgIGVycixcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBwYXlsb2FkLFxuICAgICk7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGVycm9ycyB0aGF0IGFyZSB0aHJvd24gYnkgZ3JhbW1ZIGJlY2F1c2UgYW4gSFRUUCBjYWxsXG4gKiB0byB0aGUgVGVsZWdyYW0gQm90IEFQSSBmYWlsZWQuXG4gKlxuICogSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgaG9sZCB0aGUgZXJyb3Igb2JqZWN0IHRoYXQgd2FzIGNyZWF0ZWQgYmVjYXVzZSB0aGVcbiAqIGZldGNoIGNhbGwgZmFpbGVkLiBJdCBjYW4gYmUgaW5zcGVjdGVkIHRvIGRldGVybWluZSB3aHkgZXhhY3RseSB0aGUgbmV0d29ya1xuICogcmVxdWVzdCBmYWlsZWQuXG4gKlxuICogSWYgYW4gW0FQSSB0cmFuc2Zvcm1lclxuICogZnVuY3Rpb25dKGh0dHBzOi8vZ3JhbW15LmRldi9hZHZhbmNlZC90cmFuc2Zvcm1lcnMpIHRocm93cyBhbiBlcnJvcixcbiAqIGdyYW1tWSB3aWxsIHJlZ2FyZCB0aGlzIGFzIGlmIHRoZSBuZXR3b3JrIHJlcXVlc3QgZmFpbGVkLiBUaGUgY29udGFpbmVkIGVycm9yXG4gKiB3aWxsIHRoZW4gYmUgdGhlIGVycm9yIHRoYXQgd2FzIHRocm93biBieSB0aGUgdHJhbnNmb3JtZXIgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBIdHRwRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICAgICAgLyoqIFRoZSB0aHJvd24gZXJyb3Igb2JqZWN0LiAqL1xuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgZXJyb3I6IHVua25vd24sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkh0dHBFcnJvclwiO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNUZWxlZ3JhbUVycm9yKFxuICAgIGVycjogdW5rbm93bixcbik6IGVyciBpcyB7IHN0YXR1czogc3RyaW5nOyBzdGF0dXNUZXh0OiBzdHJpbmcgfSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIGVyciA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBlcnIgIT09IG51bGwgJiZcbiAgICAgICAgXCJzdGF0dXNcIiBpbiBlcnIgJiZcbiAgICAgICAgXCJzdGF0dXNUZXh0XCIgaW4gZXJyXG4gICAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0h0dHBFcnJvcihtZXRob2Q6IHN0cmluZywgc2Vuc2l0aXZlTG9nczogYm9vbGVhbikge1xuICAgIHJldHVybiAoZXJyOiB1bmtub3duKSA9PiB7XG4gICAgICAgIGxldCBtc2cgPSBgTmV0d29yayByZXF1ZXN0IGZvciAnJHttZXRob2R9JyBmYWlsZWQhYDtcbiAgICAgICAgaWYgKGlzVGVsZWdyYW1FcnJvcihlcnIpKSBtc2cgKz0gYCAoJHtlcnIuc3RhdHVzfTogJHtlcnIuc3RhdHVzVGV4dH0pYDtcbiAgICAgICAgaWYgKHNlbnNpdGl2ZUxvZ3MgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIG1zZyArPSBgICR7ZXJyLm1lc3NhZ2V9YDtcbiAgICAgICAgdGhyb3cgbmV3IEh0dHBFcnJvcihtc2csIGVycik7XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLFNBQVMsQ0FBQyxRQUFRLHNCQUFzQjtBQUNqRCxNQUFNLFFBQVEsRUFBRTtBQUVoQjs7Ozs7Ozs7OztDQVVDLEdBQ0QsT0FBTyxNQUFNLG9CQUFvQjs7O0VBQzdCLDZEQUE2RCxHQUM3RCxBQUFnQixHQUFrQjtFQUNsQyxpRUFBaUUsR0FDakUsQUFBZ0IsV0FBbUI7RUFDbkMsK0NBQStDLEdBQy9DLEFBQWdCLFlBQW9CO0VBQ3BDLHdFQUF3RSxHQUN4RSxBQUFnQixXQUErQjtFQUMvQyxZQUNJLE9BQWUsRUFDZixHQUFhLEVBQ2IsaUVBQWlFLEdBQ2pFLEFBQWdCLE1BQWMsRUFDOUIseURBQXlELEdBQ3pELEFBQWdCLE9BQWdDLENBQ2xEO0lBQ0UsS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBSjFDLFNBQUE7U0FFQSxVQUFBO1NBYkosS0FBWTtJQWdCeEIsSUFBSSxDQUFDLElBQUksR0FBRztJQUNaLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxVQUFVO0lBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXO0lBQ2xDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxVQUFVLElBQUksQ0FBQztFQUN6QztBQUNKO0FBQ0EsT0FBTyxTQUFTLGNBQ1osR0FBYSxFQUNiLE1BQWMsRUFDZCxPQUFnQztFQUVoQyxPQUFRLElBQUksVUFBVTtJQUNsQixLQUFLO01BQ0QsTUFDSTtNQUVKO0lBQ0osS0FBSztNQUNELE1BQ0k7TUFFSjtFQUNSO0VBQ0EsT0FBTyxJQUFJLFlBQ1AsQ0FBQyxTQUFTLEVBQUUsT0FBTyxTQUFTLENBQUMsRUFDN0IsS0FDQSxRQUNBO0FBRVI7QUFFQTs7Ozs7Ozs7Ozs7O0NBWUMsR0FDRCxPQUFPLE1BQU0sa0JBQWtCOztFQUMzQixZQUNJLE9BQWUsRUFDZiw2QkFBNkIsR0FDN0IsQUFBZ0IsS0FBYyxDQUNoQztJQUNFLEtBQUssQ0FBQztTQUZVLFFBQUE7SUFHaEIsSUFBSSxDQUFDLElBQUksR0FBRztFQUNoQjtBQUNKO0FBRUEsU0FBUyxnQkFDTCxHQUFZO0VBRVosT0FDSSxPQUFPLFFBQVEsWUFDZixRQUFRLFFBQ1IsWUFBWSxPQUNaLGdCQUFnQjtBQUV4QjtBQUNBLE9BQU8sU0FBUyxZQUFZLE1BQWMsRUFBRSxhQUFzQjtFQUM5RCxPQUFPLENBQUM7SUFDSixJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxPQUFPLFNBQVMsQ0FBQztJQUNuRCxJQUFJLGdCQUFnQixNQUFNLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQztJQUN0RSxJQUFJLGlCQUFpQixlQUFlLE9BQU8sT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxDQUFDO0lBQ25FLE1BQU0sSUFBSSxVQUFVLEtBQUs7RUFDN0I7QUFDSiJ9